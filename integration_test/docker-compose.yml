# Use the lastest version of docker-compose syntax
version: '3'

# Define the services
services:

  integration_tester:
    # Go to specified folder and look for the service's Dockerfile there
    build: .
    # Define dependency, so that store can connect to auth
    depends_on:
     - auth
    # Run the auth service (dev or prod)
    command: ./setup/wait-for.sh auth:3001 -- npm test

  auth:
    # Go to specified folder and look for the service's Dockerfile there
    build: ../auth_svc
    # Map hostPort:containerPort (host is on the left!)
    ports:
     - "3001:${AUTH_PORT}"
    # Map the local dev files to enable nodemon inside docker container
    volumes:
     - ../auth_svc:/auth
     - /auth/node_modules/
    # Define dependency, so that store can connect to db
    depends_on:
     - auth_db
    # Restart the server on crashes
    restart: always
    # Set the environment variables
    environment:
     - AUTH_DB_USER=${AUTH_DB_USER}
     - AUTH_DB_PASSWORD=${AUTH_DB_PASSWORD}
     - AUTH_DB_NAME=${AUTH_DB_NAME}
     - AUTH_DB_HOST=${AUTH_DB_HOST}
     - AUTH_DB_PORT=${AUTH_DB_PORT}
     - JWT_SECRET=${JWT_SECRET}
     - SK_STRIPE=${SK_STRIPE}
    # Run the auth service (dev or prod)
    command: ./setup/wait-for.sh auth_db:3306 -- npm run ${ENV}

  auth_db:
    # Go to specified folder and look for the service's Dockerfile there
    build: ../auth_db_svc
    # Map hostPort:containerPort (host is on the left!)
    ports:
     - ${AUTH_DB_PORT}
    # Restart the server on crashes
    restart: always
    # Set up a default mySQL db
    environment:
     - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
     - MYSQL_DATABASE=${AUTH_DB_NAME}